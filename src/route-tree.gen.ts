/Users/gnllucena/git/app/.gitignore/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as workspaceLayoutImport } from './routes/(workspace)/_layout'
import { Route as workspaceWorkspaceImport } from './routes/(workspace)/workspace'

// Create Virtual Routes

const Import = createFileRoute('/')()

// Create/Update Routes

const workspaceLayoutRoute = workspaceLayoutImport.update({
  id: '/(workspace)',
  getParentRoute: () => Route,
} as any)

const Route = Import.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const workspaceWorkspaceRoute = workspaceWorkspaceImport.update({
  id: '/workspace',
  path: '/workspace',
  getParentRoute: () => workspaceLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof Import
      parentRoute: typeof rootRoute
    }
    '/(workspace)': {
      id: '/(workspace)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof workspaceLayoutImport
      parentRoute: typeof Route
    }
    '/(workspace)/workspace': {
      id: '/(workspace)/workspace'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof workspaceWorkspaceImport
      parentRoute: typeof workspaceLayoutImport
    }
  }
}

// Create and export the route tree

interface workspaceLayoutRouteChildren {
  workspaceWorkspaceRoute: typeof workspaceWorkspaceRoute
}

const workspaceLayoutRouteChildren: workspaceLayoutRouteChildren = {
  workspaceWorkspaceRoute: workspaceWorkspaceRoute,
}

const workspaceLayoutRouteWithChildren = workspaceLayoutRoute._addFileChildren(
  workspaceLayoutRouteChildren,
)

interface RouteChildren {
  workspaceLayoutRoute: typeof workspaceLayoutRouteWithChildren
}

const RouteChildren: RouteChildren = {
  workspaceLayoutRoute: workspaceLayoutRouteWithChildren,
}

const RouteWithChildren = Route._addFileChildren(RouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof workspaceLayoutRouteWithChildren
  '/workspace': typeof workspaceWorkspaceRoute
}

export interface FileRoutesByTo {
  '/': typeof workspaceLayoutRouteWithChildren
  '/workspace': typeof workspaceWorkspaceRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof RouteWithChildren
  '/(workspace)': typeof workspaceLayoutRouteWithChildren
  '/(workspace)/workspace': typeof workspaceWorkspaceRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/workspace'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/workspace'
  id: '__root__' | '/' | '/(workspace)' | '/(workspace)/workspace'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  Route: typeof RouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  Route: RouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/"
      ]
    },
    "/": {
      "filePath": "(workspace)",
      "children": [
        "/(workspace)"
      ]
    },
    "/(workspace)": {
      "filePath": "(workspace)/_layout.tsx",
      "parent": "/",
      "children": [
        "/(workspace)/workspace"
      ]
    },
    "/(workspace)/workspace": {
      "filePath": "(workspace)/workspace.tsx",
      "parent": "/(workspace)"
    }
  }
}
ROUTE_MANIFEST_END */
